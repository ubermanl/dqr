---
swagger: "2.0"
info:
  description: "API para interactuar con DqR domo"
  version: "2.4.0"
  title: "DqR domo API interface"
host: "localhost:8080"
basePath: "/"
paths:
  /:
    get:
      description: "API root directory shows how to use the different\
        \ methods"
      operationId: "displayRoot"
      produces:
      - "text/html"
      parameters: []
      responses:
        200:
          description: "Successful operation"
      x-swagger-router-controller: "swagger_server.controllers.defaultController"

  /ai/train/load:
    get:
      tags:
      - "ai"
      summary: "Load trained models from disk"
      description: "This method will load all previously saved training models so that they can be used, avoiding training time after service restart or reboot."
      operationId: "load"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid request"
        404:
          description: "Training models not found"
      x-swagger-router-controller: "swagger_server.controllers.defaultController"
  
  /ai/train/save:
    get:
      tags:
      - "ai"
      summary: "Save trained models to disk"
      description: "This method will save all current trained models so that they can be reloaded later, thus avoiding training time on every service load."
      operationId: "save"
      produces:
      - "application/json"
  
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid request"
        404:
          description: "Training models not found"
      x-swagger-router-controller: "swagger_server.controllers.defaultController"

  /ai/train/purge:
    get:
      tags:
      - "ai"
      summary: "Purge trained models"
      description: "This method will purge all current trained models from both disk and memory."
      operationId: "purge"
      produces:
      - "application/json"
  
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid request"
        404:
          description: "Training models not found"
      x-swagger-router-controller: "swagger_server.controllers.defaultController"
      
  /ai/train/{moduleId}:
    get:
      tags:
      - "ai"
      summary: "Train the neural network of a given module"
      description: "This method will create and train a neural network for a specific\
        \ module."
      operationId: "train"
      produces:
      - "application/json"
      parameters:
      - name: "moduleId"
        in: "path"
        description: "Unique module identificator"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid id"
        404:
          description: "Device not found"
      x-swagger-router-controller: "swagger_server.controllers.defaultController"

  /ai/isTrained/{moduleId}:
    get:
      tags:
      - "ai"
      summary: "Check whether trained intelligence exists for a given module"
      description: "This method will check if an neural network (or equivalent) exists for\
        \ a given module, so that it can be used to suggest module states."
      operationId: "isTrained"
      produces:
      - "application/json"
      parameters:
      - name: "moduleId"
        in: "path"
        description: "Unique module identificator"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid id"
        404:
          description: "Device not found"
      x-swagger-router-controller: "swagger_server.controllers.defaultController"

  /status/getSuggested/{moduleId}:
    get:
      tags:
      - "status"
      summary: "Query suggested state of a Lux device"
      description: "This method will query the suggested state (on/off) of a module\
        \ at current time."
      operationId: "getSuggestedState"
      produces:
      - "application/json"
      parameters:
      - name: "moduleId"
        in: "path"
        description: "Unique module identificator"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid id"
        404:
          description: "Device not found"
      x-swagger-router-controller: "swagger_server.controllers.defaultController"

  /status/getSuggestedChange/{moduleId}:
    get:
      tags:
      - "status"
      summary: "This method"
      description: "This method will ask for the suggested state \
        \ change of a specific module at current time."
      operationId: "getSuggestedStateChange"
      produces:
      - "application/json"
      parameters:
      - name: moduleId
        in: path
        description: Unique module identificator
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid id"
        404:
          description: "Device not found"
      x-swagger-router-controller: "swagger_server.controllers.defaultController"

  /status/query/{deviceId}:
    get:
      tags:
      - "status"
      summary: "Query the status of a device"
      description: "This method will send a status update request to a specific device\
        \ and report whether the message was delivered correctly or not."
      operationId: "query"
      produces:
      - "application/json"
      parameters:
      - name: "deviceId"
        in: "path"
        description: "Unique device id"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid id"
        404:
          description: "Device not found"
      x-swagger-router-controller: "swagger_server.controllers.defaultController"

  /status/change/{moduleId}:
    get:
      tags:
      - "status"
      summary: "Request a change on the status of a module"
      description: "This method will send a status change request to a specific module\
        \ and report whether the message was delivered correctly or not. Device is\
        \ implicit by module id."
      operationId: "change"
      produces:
      - "application/json"
      parameters:
        - name: moduleId
          in: path
          description: Unique module identificator
          required: true
          type: integer
        - name: state
          in: query
          description: Whether to turn on or off (0 or 1)
          required: true
          type: integer
          enum: [0, 1]
          default: 0
        - name: ovr
          in: query
          description: Set to 1 to send request with override turned on
          required: false
          type: integer
          enum: [0, 1]
          default: 0
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid id"
        404:
          description: "Device not found"
      x-swagger-router-controller: "swagger_server.controllers.defaultController"

definitions: {}
